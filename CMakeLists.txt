cmake_minimum_required(VERSION 3.1)
project (lib_netsockets)
set (CMAKE_CXX_STANDARD 11)
set(BUILD_SHARED_LIBRARIES OFF)

find_path(JANSSON_INCLUDE jansson.h HINTS "/usr/include")
if(NOT JANSSON_INCLUDE)
  message(FATAL_ERROR "jansson.h header file not found")
else()
  message("-- Found jansson.h header file at: " ${JANSSON_INCLUDE}/jansson.h)
endif()

find_library(JANSSON_LIBRARY NAMES jansson)
if(NOT JANSSON_LIBRARY)
  message(FATAL_ERROR "jansson library not found")
else()
  message("-- Found jansson library at: " ${JANSSON_LIBRARY})
endif()

if (MSVC)
  add_definitions( "/D_CRT_SECURE_NO_WARNINGS /D_WINSOCK_DEPRECATED_NO_WARNINGS" )
  if (STATIC_CRT)
    message("-- Building with static runtime library")
	set(CMAKE_CXX_FLAGS_DEBUG "/D_DEBUG /MTd /Zi /Ob0 /Od /RTC1")
    set(CMAKE_CXX_FLAGS_MINSIZEREL     "/MT /O1 /Ob1 /D NDEBUG")
    set(CMAKE_CXX_FLAGS_RELEASE        "/MT /O2 /Ob2 /D NDEBUG")
    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "/MT /Zi /O2 /Ob1 /D NDEBUG")
  endif()  
  set(WINSOCK_LIBRARY ws2_32.lib)
endif(MSVC)

include_directories(${JANSSON_INCLUDE})
set(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} ${JANSSON_LIBRARY})
set(SOURCES socket.cc http.cc ftp.cc socket.hh http.hh ftp.hh)
add_executable(tcp_client_01 tcp_client_01.cc ${SOURCES})
add_executable(tcp_server_01 tcp_server_01.cc ${SOURCES})
add_executable(http_client http_client.cc ${SOURCES})
add_executable(http_server http_server.cc ${SOURCES})
add_executable(ftp_client ftp_client.cc ${SOURCES})
add_executable(json_client json_client.cc ${SOURCES})
add_executable(json_server json_server.cc ${SOURCES})
target_link_libraries (tcp_client_01 ${JANSSON_LIBRARY} ${WINSOCK_LIBRARY})
target_link_libraries (tcp_server_01 ${JANSSON_LIBRARY} ${WINSOCK_LIBRARY})
target_link_libraries (http_client ${JANSSON_LIBRARY} ${WINSOCK_LIBRARY})
target_link_libraries (http_server ${JANSSON_LIBRARY} ${WINSOCK_LIBRARY})
target_link_libraries (ftp_client ${JANSSON_LIBRARY} ${WINSOCK_LIBRARY})
target_link_libraries (json_client ${JANSSON_LIBRARY} ${WINSOCK_LIBRARY})
target_link_libraries (json_server ${JANSSON_LIBRARY} ${WINSOCK_LIBRARY})
